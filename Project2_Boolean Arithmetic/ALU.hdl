// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Mux16(a= x,b[0]=false,
              b[1]= false,
	      b[2]= false, 
	      b[3]= false,
	      b[4]= false,
	      b[5]= false,
	      b[6]= false,
	      b[7]= false,
	      b[8]= false,
	      b[9]= false,
	      b[10]= false,
	      b[11]= false,
	      b[12]= false,
	      b[13]= false,
	      b[14]= false,
	      b[15]= false,sel= zx ,out= xfirst); /* Selects between two 16-bit inputs */
   Mux16(a= y,b[0]=false,
              b[1]= false,
	      b[2]= false, 
	      b[3]= false,
	      b[4]= false,
	      b[5]= false,
	      b[6]= false,
	      b[7]= false,
	      b[8]= false,
	      b[9]= false,
	      b[10]= false,
	      b[11]= false,
	      b[12]= false,
	      b[13]= false,
	      b[14]= false,
	      b[15]= false,sel= zy,out= yfirst); /* Selects between two 16-bit inputs */
   Not16(in= xfirst,out= xfirstNot); /* Not gate */
   Mux16(a= xfirst,b= xfirstNot,sel= nx,out= xSel); /* Selects between two 16-bit inputs */
   Not16(in= yfirst,out= yfirstNot); /* Not gate */
   Mux16(a= yfirst,b= yfirstNot,sel= ny,out= ySel); /* Selects between two 16-bit inputs */
   And16(a= xSel,b= ySel,out= xyAnd); /* 16-bit And */
   Add16(a= xSel,b= ySel,out= xyAdd); /* Adds up two 16-bit two's complement values */
   Mux16(a= xyAnd,b= xyAdd,sel= f,out= outFunction); /* Selects between two 16-bit inputs */
   Not16(in= outFunction,out= outFunctionNot); /* Not gate */
   Mux16(a= outFunction,b= outFunctionNot,sel= no,out= out, out[0..7] = out1, out[8..15] = out2, out[15] = outSign); /* Selects between two 16-bit inputs */
   
   And(a= outSign,b= true,out= ng); /* And gate */
   
   Or8Way(in= out1,out= or1); /* 8-way Or */
   Or8Way(in= out2,out= or2); /* 8-way Or */
   Or(a= or1,b= or2,out= zero); /* Or gate */
   Not(in= zero,out= zr); /* Not gate */

}