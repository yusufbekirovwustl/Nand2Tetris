// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;
    /** Initializes the class. */
    function void init() {
    	let ram = 0;
	let heap = 2048;
        let freeList = 2048;
	let freeList[0] = freeList; //Point to self; next pointer in header
	let freeList[1] = 14332; //14336(heap size) - 4(next and length fields); size for header
	let freeList[2] = 1; //Free bit
	let freeList[freeList[1] + 3] = freeList[1]; //size for footer
	let freeList[freeList[1] + 4] = freeList; //Point to self; prev pointer in footer
	return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
	return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
	let ram[address] = value;
	return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. If failed returns -1.
     *  Implementation uses a fully-linked lists in heap with header and footer
     *  Header includes next pointer, size, and free bit; while footer has
     *  size and pointer to prev pointer */
    function int alloc(int size) {
	var boolean found;
	var Array block;
	var Array prevBlockP;
	var Array nextBlockP;
	var int prevBlockPSize;
	var Array nextBlock;
	let found = false;
	let block = freeList; //block pointer now points at freeList
	while(~found) {
	   
	    if(block[2] = 1) {
			if(~(block[1]< (size + 5))) {
				let found = true;
	    	}
	    	else {
	    	    let block = block[0]; //Go to next pointer
				if(block = freeList) { //Wrapped around freeList, no open spot
					return -1;
				}		
	        }
	    }
	    else {
	 		let block = block[0]; //Go to next pointer
			if(block = freeList) { //Wrapped around freeList, no open spot
				return -1;
			}
	    }
	}
	//Found suitable block to store into
	let nextBlock = block + 5 + size; //address of next List into nextBlock
	let nextBlockP = block[0];
	let prevBlockPSize = block[1];
	let prevBlockP = block[(prevBlockPSize+4)];

	let block[0] = nextBlock;
	let block[1] = size;
	let block[2] = 0;
	let block[(size+3)] = size;
	let block[(size+4)] = prevBlockP;
	
	let nextBlock[0] = nextBlockP;
	let nextBlock[1] = (prevBlockPSize - (5 + size));
	let nextBlock[2] = 1;
	let nextBlock[(nextBlock[1]) +3] = nextBlock[1];
	let nextBlock[(nextBlock[1]) +4] = block;

	return (block+3); // Return base data address
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) { 
	var int address;//The process of deAlloc of an object in a fully-linked list in the heap just requires flip of free bit
	let address = o-3; // Base address of List, not object
	let address[2] = 0;
	return;
    }    
}
